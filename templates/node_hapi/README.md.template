# {{APP_NAME}}

{{APP_DESCRIPTION}}

**Generated by:** {{GENERATOR}}
**Generated at:** {{GENERATED_AT}}

## Overview

This FHIR application was automatically generated based on your requirements and connects to a FHIR server to manage healthcare data. The application includes both a backend API server using HAPI FHIR and a React frontend for user interaction.

### Supported FHIR Resources

{{#EACH_RESOURCE}}
- **{{RESOURCE_NAME}}**: {{RESOURCE_NAME}} management and display
{{/EACH_RESOURCE}}

### FHIR Server Configuration

- **Server URL**: {{FHIR_SERVER_URL}}
- **Capability Statement**: {{CAPABILITY_STATEMENT_URL}}
- **FHIR Version**: R4
- **Authentication**: OAuth 2.0 / SMART on FHIR (configurable)

## Quick Start

### Prerequisites

- Node.js 18+
- npm or yarn
- Docker (optional, for containerized deployment)

### Installation

1. **Install dependencies:**
   ```bash
   npm install
   cd client && npm install && cd ..
   ```

2. **Configure environment:**
   ```bash
   cp .env.example .env
   # Edit .env with your FHIR server details
   ```

3. **Start development servers:**
   ```bash
   npm run dev
   ```

   This starts:
   - Backend API server on http://localhost:8080
   - Frontend React app on http://localhost:3000

### Docker Deployment

1. **Build and start with Docker Compose:**
   ```bash
   npm run docker:build
   npm run docker:up
   ```

2. **Access the application:**
   - Frontend: http://localhost:3000
   - Backend API: http://localhost:8080
   - HAPI FHIR Server: http://localhost:8081

## Project Structure

```
{{APP_NAME}}/
├── src/                    # Backend source code
│   ├── server.js          # Main HAPI server
│   ├── routes/            # API route definitions
│   ├── services/          # FHIR client services
│   └── config/            # Configuration files
├── client/                # React frontend
│   ├── src/
│   │   ├── components/    # React components
│   │   ├── services/      # API client services
│   │   ├── pages/         # Page components
│   │   └── utils/         # Utility functions
│   └── public/            # Static assets
├── docker-compose.yml     # Docker configuration
├── Dockerfile             # Container definition
└── README.md             # This file
```

## Configuration

### Environment Variables

Create a `.env` file in the root directory:

```env
# FHIR Server Configuration
FHIR_SERVER_URL={{FHIR_SERVER_URL}}
FHIR_SERVER_AUTH_TYPE=none
# FHIR_CLIENT_ID=your-client-id
# FHIR_CLIENT_SECRET=your-client-secret

# Server Configuration
PORT=8080
NODE_ENV=development

# Security
CORS_ORIGIN=http://localhost:3000
SESSION_SECRET=your-session-secret

# Optional: Authentication
# OAUTH_AUTHORIZATION_URL=
# OAUTH_TOKEN_URL=
# OAUTH_SCOPE=patient/*.read
```

### FHIR Server Authentication

This application supports multiple authentication methods:

1. **No Authentication** (default for testing)
2. **OAuth 2.0 / SMART on FHIR**
3. **Basic Authentication**
4. **Bearer Token**

Configure authentication in `src/config/fhir.js`.

## API Endpoints

The backend provides REST API endpoints for each FHIR resource:

{{#EACH_RESOURCE}}
### {{RESOURCE_NAME}} Endpoints

- `GET /api/{{RESOURCE_NAME_LOWER}}` - List {{RESOURCE_NAME_LOWER}}s
- `GET /api/{{RESOURCE_NAME_LOWER}}/:id` - Get specific {{RESOURCE_NAME_LOWER}}
- `POST /api/{{RESOURCE_NAME_LOWER}}` - Create new {{RESOURCE_NAME_LOWER}}
- `PUT /api/{{RESOURCE_NAME_LOWER}}/:id` - Update {{RESOURCE_NAME_LOWER}}
- `DELETE /api/{{RESOURCE_NAME_LOWER}}/:id` - Delete {{RESOURCE_NAME_LOWER}}
- `GET /api/{{RESOURCE_NAME_LOWER}}/search` - Search {{RESOURCE_NAME_LOWER}}s

{{/EACH_RESOURCE}}

### Example API Usage

```javascript
// Get all patients
const patients = await fetch('/api/patient').then(r => r.json());

// Search for specific patient
const searchResults = await fetch('/api/patient/search?family=Smith').then(r => r.json());

// Create new patient
const newPatient = await fetch('/api/patient', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    resourceType: 'Patient',
    name: [{ family: 'Doe', given: ['John'] }]
  })
}).then(r => r.json());
```

## Frontend Components

The React frontend includes pre-built components for each FHIR resource:

{{#EACH_RESOURCE}}
- **{{RESOURCE_NAME}}Component**: Display and manage {{RESOURCE_NAME_LOWER}}s
{{/EACH_RESOURCE}}

### Component Usage

```jsx
import React from 'react';
{{#EACH_RESOURCE}}
import {{RESOURCE_NAME}}Component from './components/{{RESOURCE_NAME}}Component';
{{/EACH_RESOURCE}}

function App() {
  return (
    <div className="app">
      <h1>{{APP_NAME}}</h1>
      {{#EACH_RESOURCE}}
      <{{RESOURCE_NAME}}Component />
      {{/EACH_RESOURCE}}
    </div>
  );
}
```

## Testing

### Running Tests

```bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Run with coverage
npm test -- --coverage
```

### Test Structure

- `src/__tests__/` - Backend API tests
- `client/src/__tests__/` - Frontend component tests
- `integration/` - End-to-end tests

## Deployment

### Production Build

```bash
npm run build
npm start
```

### Docker Production

```bash
docker build -t {{APP_NAME}} .
docker run -p 8080:8080 {{APP_NAME}}
```

### Cloud Deployment

The application is ready for deployment to:

- **Heroku**: Use the included `Procfile`
- **AWS**: Use Docker or Lambda
- **Google Cloud**: Use Cloud Run or App Engine
- **Azure**: Use Container Instances or App Service

## Security Considerations

- **HTTPS**: Always use HTTPS in production
- **Authentication**: Implement proper FHIR server authentication
- **CORS**: Configure CORS for your domain
- **Input Validation**: All FHIR resources are validated
- **Rate Limiting**: Consider implementing rate limiting
- **Audit Logging**: Enable audit logs for compliance

## FHIR Compliance

This application follows FHIR R4 standards:

- ✅ Resource validation using FHIR schemas
- ✅ RESTful API patterns
- ✅ Standard search parameters
- ✅ FHIR Bundle support
- ✅ Error handling with OperationOutcome

## Customization

### Adding New Resources

1. Add the resource to the FHIR client configuration
2. Create API routes in `src/routes/`
3. Create React components in `client/src/components/`
4. Update navigation and routing

### Extending Functionality

- **Search**: Add custom search parameters
- **Validation**: Implement custom validation rules
- **Workflow**: Add business logic and workflows
- **Integration**: Connect to external systems
- **Analytics**: Add usage analytics and monitoring

## Support

For support and questions:

1. Check the [FHIR R4 specification](https://hl7.org/fhir/R4/)
2. Review the [HAPI FHIR documentation](https://hapifhir.io/)
3. Contact FHIR IQ support: support@fhiriq.com

## License

This generated application is licensed under the MIT License. See LICENSE file for details.

---

**Powered by FHIR IQ Builder** - https://fhiriq.com/builder