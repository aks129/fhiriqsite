import { chromium } from '@playwright/test';

async function globalTeardown(config) {
  console.log('üßπ Starting global teardown for {{APP_NAME}} tests...');

  const browser = await chromium.launch();
  const page = await browser.newPage();

  try {
    const baseURL = config.use.baseURL || 'http://localhost:8080';

    // Clean up test data
    await cleanupTestData(page, baseURL);

    console.log('‚úÖ Global teardown completed successfully');

  } catch (error) {
    console.error('‚ùå Global teardown failed:', error.message);
    // Don't throw the error as teardown failures shouldn't fail the entire test run
  } finally {
    await browser.close();
  }
}

async function cleanupTestData(page, baseURL) {
  console.log('üóëÔ∏è  Cleaning up test data...');

  try {
    // Check if the API is still accessible
    const healthResponse = await page.request.get(`${baseURL}/health`);

    if (healthResponse.status() !== 200) {
      console.log('   Application is not responding, skipping cleanup');
      return;
    }

    // Find and delete test resources created during setup and tests
    await cleanupTestResources(page, baseURL, 'Patient');
{{#EACH_RESOURCE}}
    await cleanupTestResources(page, baseURL, '{{RESOURCE_NAME}}');
{{/EACH_RESOURCE}}

  } catch (error) {
    console.log(`‚ö†Ô∏è  Could not cleanup test data: ${error.message}`);
  }
}

async function cleanupTestResources(page, baseURL, resourceType) {
  try {
    // Search for test resources with our test tag
    const searchUrl = `${baseURL}/api/${resourceType.toLowerCase()}?_tag=http://fhiriq.com/tags|test-data&_count=100`;
    const searchResponse = await page.request.get(searchUrl);

    if (searchResponse.status() === 200) {
      const bundle = await searchResponse.json();

      if (bundle.entry && bundle.entry.length > 0) {
        console.log(`   Found ${bundle.entry.length} test ${resourceType} resources to clean up`);

        // Delete each test resource
        for (const entry of bundle.entry) {
          const resource = entry.resource;
          if (resource && resource.id) {
            try {
              const deleteResponse = await page.request.delete(
                `${baseURL}/api/${resourceType.toLowerCase()}/${resource.id}`
              );

              if (deleteResponse.status() === 204 || deleteResponse.status() === 200) {
                console.log(`   ‚úÖ Deleted test ${resourceType} ${resource.id}`);
              } else {
                console.log(`   ‚ö†Ô∏è  Could not delete ${resourceType} ${resource.id} (status: ${deleteResponse.status()})`);
              }
            } catch (deleteError) {
              console.log(`   ‚ö†Ô∏è  Error deleting ${resourceType} ${resource.id}: ${deleteError.message}`);
            }
          }
        }
      } else {
        console.log(`   No test ${resourceType} resources found to clean up`);
      }
    } else if (searchResponse.status() === 404) {
      console.log(`   ${resourceType} endpoint not found, skipping cleanup`);
    } else {
      console.log(`   Could not search for test ${resourceType} resources (status: ${searchResponse.status()})`);
    }

  } catch (error) {
    console.log(`   Error cleaning up ${resourceType} resources: ${error.message}`);
  }
}

// Also clean up any resources created with test identifiers
async function cleanupByIdentifier(page, baseURL, resourceType, identifierSystem, identifierValue) {
  try {
    const searchUrl = `${baseURL}/api/${resourceType.toLowerCase()}?identifier=${identifierSystem}|${identifierValue}`;
    const searchResponse = await page.request.get(searchUrl);

    if (searchResponse.status() === 200) {
      const bundle = await searchResponse.json();

      if (bundle.entry && bundle.entry.length > 0) {
        for (const entry of bundle.entry) {
          const resource = entry.resource;
          if (resource && resource.id) {
            try {
              await page.request.delete(`${baseURL}/api/${resourceType.toLowerCase()}/${resource.id}`);
              console.log(`   ‚úÖ Cleaned up ${resourceType} with identifier ${identifierValue}`);
            } catch (error) {
              console.log(`   ‚ö†Ô∏è  Could not delete ${resourceType} ${resource.id}: ${error.message}`);
            }
          }
        }
      }
    }
  } catch (error) {
    console.log(`   Error cleaning up ${resourceType} by identifier: ${error.message}`);
  }
}

export default globalTeardown;