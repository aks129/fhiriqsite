import { chromium } from '@playwright/test';

async function globalSetup(config) {
  console.log('üöÄ Starting global setup for {{APP_NAME}} tests...');

  // Launch a browser to do initial setup
  const browser = await chromium.launch();
  const page = await browser.newPage();

  try {
    // Wait for the application to be ready
    const baseURL = config.use.baseURL || 'http://localhost:8080';
    console.log(`‚è≥ Waiting for application at ${baseURL} to be ready...`);

    // Poll the health endpoint until it's ready
    let attempts = 0;
    const maxAttempts = 30; // 30 attempts * 2 seconds = 1 minute timeout

    while (attempts < maxAttempts) {
      try {
        const response = await page.request.get(`${baseURL}/health`);

        if (response.status() === 200) {
          const health = await response.json();
          console.log('‚úÖ Application is healthy');
          console.log(`   - Application: ${health.application}`);
          console.log(`   - FHIR Status: ${health.fhir?.status || 'unknown'}`);
          console.log(`   - FHIR Version: ${health.fhir?.version || 'unknown'}`);
          break;
        } else {
          console.log(`   Health check returned ${response.status()}, retrying...`);
        }
      } catch (error) {
        console.log(`   Connection failed: ${error.message}, retrying...`);
      }

      attempts++;
      if (attempts >= maxAttempts) {
        throw new Error(`Application failed to become healthy after ${maxAttempts} attempts`);
      }

      // Wait 2 seconds before next attempt
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    // Perform any additional setup tasks
    await setupTestData(page, baseURL);

    console.log('‚úÖ Global setup completed successfully');

  } catch (error) {
    console.error('‚ùå Global setup failed:', error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

async function setupTestData(page, baseURL) {
  console.log('üìä Setting up test data...');

  try {
    // Check if we can connect to the FHIR server
    const fhirResponse = await page.request.get(`${baseURL}/api/fhir`);

    if (fhirResponse.status() === 200) {
      console.log('‚úÖ FHIR API is accessible');

      // Optionally create some test data
      await createTestDataIfNeeded(page, baseURL);
    } else {
      console.log(`‚ö†Ô∏è  FHIR API returned ${fhirResponse.status()}, tests will run with existing data`);
    }

  } catch (error) {
    console.log(`‚ö†Ô∏è  Could not setup test data: ${error.message}`);
    console.log('   Tests will run with existing data');
  }
}

async function createTestDataIfNeeded(page, baseURL) {
  // Check if we already have test data
  const patientResponse = await page.request.get(`${baseURL}/api/patient?identifier=http://fhiriq.com/test|playwright-setup&_count=1`);

  if (patientResponse.status() === 200) {
    const bundle = await patientResponse.json();

    if (bundle.total > 0) {
      console.log('   Test data already exists, skipping creation');
      return;
    }
  }

  // Try to create a test patient for integration tests
  const testPatient = {
    resourceType: 'Patient',
    identifier: [{
      system: 'http://fhiriq.com/test',
      value: 'playwright-setup'
    }],
    name: [{
      family: 'PlaywrightTest',
      given: ['Setup']
    }],
    gender: 'unknown',
    birthDate: '1990-01-01',
    meta: {
      tag: [{
        system: 'http://fhiriq.com/tags',
        code: 'test-data',
        display: 'Test Data for Playwright'
      }]
    }
  };

  try {
    const createResponse = await page.request.post(`${baseURL}/api/patient`, {
      data: testPatient
    });

    if (createResponse.status() === 201) {
      console.log('‚úÖ Created test Patient resource');
    } else {
      console.log(`   Could not create test Patient (status: ${createResponse.status()})`);
    }
  } catch (error) {
    console.log(`   Could not create test Patient: ${error.message}`);
  }

{{#IF_RESOURCE:Observation}}
  // Try to create a test observation
  const testObservation = {
    resourceType: 'Observation',
    status: 'final',
    category: [{
      coding: [{
        system: 'http://terminology.hl7.org/CodeSystem/observation-category',
        code: 'vital-signs',
        display: 'Vital Signs'
      }]
    }],
    code: {
      coding: [{
        system: 'http://loinc.org',
        code: '8310-5',
        display: 'Body temperature'
      }]
    },
    subject: {
      reference: 'Patient/playwright-test'
    },
    valueQuantity: {
      value: 98.6,
      unit: 'degF',
      system: 'http://unitsofmeasure.org',
      code: '[degF]'
    },
    meta: {
      tag: [{
        system: 'http://fhiriq.com/tags',
        code: 'test-data',
        display: 'Test Data for Playwright'
      }]
    }
  };

  try {
    const createObsResponse = await page.request.post(`${baseURL}/api/observation`, {
      data: testObservation
    });

    if (createObsResponse.status() === 201) {
      console.log('‚úÖ Created test Observation resource');
    } else {
      console.log(`   Could not create test Observation (status: ${createObsResponse.status()})`);
    }
  } catch (error) {
    console.log(`   Could not create test Observation: ${error.message}`);
  }
{{/IF_RESOURCE:Observation}}
}

export default globalSetup;