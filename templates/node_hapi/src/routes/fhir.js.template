import Joi from 'joi';
import { fhirClient } from '../services/fhirClient.js';
import { logger } from '../utils/logger.js';

export const createFHIRRoutes = async (server) => {
  // Base FHIR API route
  server.route({
    method: 'GET',
    path: '/api/fhir',
    handler: async (request, h) => {
      try {
        const capabilities = await fhirClient.capabilities();
        return {
          message: 'FHIR API is running',
          server: capabilities.implementation?.description || 'FHIR Server',
          version: capabilities.fhirVersion,
          timestamp: new Date().toISOString()
        };
      } catch (error) {
        logger.error('Failed to get FHIR capabilities', { error: error.message });
        return h.response({
          error: 'FHIR server connection failed',
          message: error.message
        }).code(503);
      }
    }
  });

{{#EACH_RESOURCE}}
  // {{RESOURCE_NAME}} routes
  server.route([
    {
      method: 'GET',
      path: '/api/{{RESOURCE_NAME_LOWER}}',
      options: {
        description: 'Get {{RESOURCE_NAME}} resources',
        tags: ['api', '{{RESOURCE_NAME_LOWER}}'],
        validate: {
          query: Joi.object({
            _count: Joi.number().integer().min(1).max(100).default(20),
            _sort: Joi.string(),
            _lastUpdated: Joi.string(),
            _id: Joi.string(),
            _include: Joi.string(),
            _revinclude: Joi.string()
          }).unknown(true)
        }
      },
      handler: async (request, h) => {
        try {
          logger.info('Fetching {{RESOURCE_NAME}} resources', { query: request.query });

          const searchParams = {
            ...request.query,
            _count: request.query._count || 20
          };

          const response = await fhirClient.search({
            resourceType: '{{RESOURCE_NAME}}',
            searchParams
          });

          return {
            resourceType: 'Bundle',
            type: 'searchset',
            total: response.total || 0,
            entry: response.entry || [],
            link: response.link || [],
            meta: {
              lastUpdated: new Date().toISOString(),
              tag: [{
                system: 'http://fhiriq.com/tags',
                code: 'generated-api',
                display: 'Generated by FHIR IQ Builder'
              }]
            }
          };
        } catch (error) {
          logger.error('Failed to fetch {{RESOURCE_NAME}} resources', { error: error.message });
          return h.response({
            resourceType: 'OperationOutcome',
            issue: [{
              severity: 'error',
              code: 'processing',
              diagnostics: `Failed to fetch {{RESOURCE_NAME}} resources: ${error.message}`
            }]
          }).code(500);
        }
      }
    },
    {
      method: 'GET',
      path: '/api/{{RESOURCE_NAME_LOWER}}/{id}',
      options: {
        description: 'Get specific {{RESOURCE_NAME}} by ID',
        tags: ['api', '{{RESOURCE_NAME_LOWER}}'],
        validate: {
          params: Joi.object({
            id: Joi.string().required()
          })
        }
      },
      handler: async (request, h) => {
        try {
          const { id } = request.params;
          logger.info('Fetching {{RESOURCE_NAME}} by ID', { id });

          const resource = await fhirClient.read({
            resourceType: '{{RESOURCE_NAME}}',
            id
          });

          return resource;
        } catch (error) {
          logger.error('Failed to fetch {{RESOURCE_NAME}} by ID', {
            id: request.params.id,
            error: error.message
          });

          if (error.response?.status === 404) {
            return h.response({
              resourceType: 'OperationOutcome',
              issue: [{
                severity: 'error',
                code: 'not-found',
                diagnostics: `{{RESOURCE_NAME}} with ID ${request.params.id} not found`
              }]
            }).code(404);
          }

          return h.response({
            resourceType: 'OperationOutcome',
            issue: [{
              severity: 'error',
              code: 'processing',
              diagnostics: `Failed to fetch {{RESOURCE_NAME}}: ${error.message}`
            }]
          }).code(500);
        }
      }
    },
    {
      method: 'POST',
      path: '/api/{{RESOURCE_NAME_LOWER}}',
      options: {
        description: 'Create new {{RESOURCE_NAME}}',
        tags: ['api', '{{RESOURCE_NAME_LOWER}}'],
        validate: {
          payload: Joi.object({
            resourceType: Joi.string().valid('{{RESOURCE_NAME}}').required(),
            id: Joi.string().optional(),
            meta: Joi.object().optional(),
            implicitRules: Joi.string().optional(),
            language: Joi.string().optional()
          }).unknown(true)
        }
      },
      handler: async (request, h) => {
        try {
          const resource = request.payload;
          logger.info('Creating new {{RESOURCE_NAME}}', { resourceId: resource.id });

          const response = await fhirClient.create({
            resourceType: '{{RESOURCE_NAME}}',
            body: resource
          });

          return h.response(response).code(201);
        } catch (error) {
          logger.error('Failed to create {{RESOURCE_NAME}}', { error: error.message });
          return h.response({
            resourceType: 'OperationOutcome',
            issue: [{
              severity: 'error',
              code: 'processing',
              diagnostics: `Failed to create {{RESOURCE_NAME}}: ${error.message}`
            }]
          }).code(500);
        }
      }
    },
    {
      method: 'PUT',
      path: '/api/{{RESOURCE_NAME_LOWER}}/{id}',
      options: {
        description: 'Update {{RESOURCE_NAME}} by ID',
        tags: ['api', '{{RESOURCE_NAME_LOWER}}'],
        validate: {
          params: Joi.object({
            id: Joi.string().required()
          }),
          payload: Joi.object({
            resourceType: Joi.string().valid('{{RESOURCE_NAME}}').required(),
            id: Joi.string().optional()
          }).unknown(true)
        }
      },
      handler: async (request, h) => {
        try {
          const { id } = request.params;
          const resource = { ...request.payload, id };

          logger.info('Updating {{RESOURCE_NAME}}', { id });

          const response = await fhirClient.update({
            resourceType: '{{RESOURCE_NAME}}',
            id,
            body: resource
          });

          return response;
        } catch (error) {
          logger.error('Failed to update {{RESOURCE_NAME}}', {
            id: request.params.id,
            error: error.message
          });

          if (error.response?.status === 404) {
            return h.response({
              resourceType: 'OperationOutcome',
              issue: [{
                severity: 'error',
                code: 'not-found',
                diagnostics: `{{RESOURCE_NAME}} with ID ${request.params.id} not found`
              }]
            }).code(404);
          }

          return h.response({
            resourceType: 'OperationOutcome',
            issue: [{
              severity: 'error',
              code: 'processing',
              diagnostics: `Failed to update {{RESOURCE_NAME}}: ${error.message}`
            }]
          }).code(500);
        }
      }
    },
    {
      method: 'DELETE',
      path: '/api/{{RESOURCE_NAME_LOWER}}/{id}',
      options: {
        description: 'Delete {{RESOURCE_NAME}} by ID',
        tags: ['api', '{{RESOURCE_NAME_LOWER}}'],
        validate: {
          params: Joi.object({
            id: Joi.string().required()
          })
        }
      },
      handler: async (request, h) => {
        try {
          const { id } = request.params;
          logger.info('Deleting {{RESOURCE_NAME}}', { id });

          await fhirClient.delete({
            resourceType: '{{RESOURCE_NAME}}',
            id
          });

          return h.response().code(204);
        } catch (error) {
          logger.error('Failed to delete {{RESOURCE_NAME}}', {
            id: request.params.id,
            error: error.message
          });

          if (error.response?.status === 404) {
            return h.response({
              resourceType: 'OperationOutcome',
              issue: [{
                severity: 'error',
                code: 'not-found',
                diagnostics: `{{RESOURCE_NAME}} with ID ${request.params.id} not found`
              }]
            }).code(404);
          }

          return h.response({
            resourceType: 'OperationOutcome',
            issue: [{
              severity: 'error',
              code: 'processing',
              diagnostics: `Failed to delete {{RESOURCE_NAME}}: ${error.message}`
            }]
          }).code(500);
        }
      }
    },
    {
      method: 'GET',
      path: '/api/{{RESOURCE_NAME_LOWER}}/search',
      options: {
        description: 'Search {{RESOURCE_NAME}} resources with advanced parameters',
        tags: ['api', '{{RESOURCE_NAME_LOWER}}', 'search'],
        validate: {
          query: Joi.object({
            _count: Joi.number().integer().min(1).max(100).default(20),
            _sort: Joi.string(),
            _include: Joi.string(),
            _revinclude: Joi.string(),
            _total: Joi.string().valid('none', 'estimate', 'accurate'),
            _elements: Joi.string(),
            _summary: Joi.string().valid('true', 'text', 'data', 'count', 'false')
          }).unknown(true)
        }
      },
      handler: async (request, h) => {
        try {
          logger.info('Advanced search for {{RESOURCE_NAME}} resources', { query: request.query });

          const searchParams = {
            ...request.query,
            _count: request.query._count || 20
          };

          const response = await fhirClient.search({
            resourceType: '{{RESOURCE_NAME}}',
            searchParams
          });

          return {
            resourceType: 'Bundle',
            type: 'searchset',
            total: response.total || 0,
            entry: response.entry || [],
            link: response.link || [],
            meta: {
              lastUpdated: new Date().toISOString(),
              tag: [{
                system: 'http://fhiriq.com/tags',
                code: 'advanced-search',
                display: 'Advanced Search via FHIR IQ Builder'
              }]
            }
          };
        } catch (error) {
          logger.error('Advanced search failed for {{RESOURCE_NAME}}', { error: error.message });
          return h.response({
            resourceType: 'OperationOutcome',
            issue: [{
              severity: 'error',
              code: 'processing',
              diagnostics: `Advanced search failed for {{RESOURCE_NAME}}: ${error.message}`
            }]
          }).code(500);
        }
      }
    }
  ]);

{{/EACH_RESOURCE}}

  // Generic FHIR resource proxy (fallback for unsupported resources)
  server.route({
    method: ['GET', 'POST', 'PUT', 'DELETE'],
    path: '/api/fhir/{resourceType*}',
    handler: async (request, h) => {
      try {
        const { resourceType } = request.params;
        const method = request.method.toUpperCase();

        logger.info('Proxying FHIR request', {
          method,
          resourceType,
          path: request.path
        });

        // This is a simple proxy - you might want to add more sophisticated handling
        const response = await fhirClient.request({
          method,
          url: request.path.replace('/api/fhir/', ''),
          data: request.payload
        });

        return response;
      } catch (error) {
        logger.error('FHIR proxy request failed', { error: error.message });
        return h.response({
          resourceType: 'OperationOutcome',
          issue: [{
            severity: 'error',
            code: 'processing',
            diagnostics: `FHIR request failed: ${error.message}`
          }]
        }).code(500);
      }
    }
  });
};