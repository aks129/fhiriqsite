import Hapi from '@hapi/hapi';
import Inert from '@hapi/inert';
import Vision from '@hapi/vision';
import dotenv from 'dotenv';
import { createFHIRRoutes } from './routes/fhir.js';
import { createHealthRoutes } from './routes/health.js';
import { fhirClient } from './services/fhirClient.js';
import { logger } from './utils/logger.js';

dotenv.config();

const init = async () => {
  const server = Hapi.server({
    port: process.env.PORT || 8080,
    host: process.env.HOST || 'localhost',
    routes: {
      cors: {
        origin: [process.env.CORS_ORIGIN || 'http://localhost:3000'],
        credentials: true
      },
      validate: {
        failAction: async (request, h, err) => {
          logger.error('Validation error', { error: err.message, path: request.path });
          throw err;
        }
      }
    }
  });

  // Register plugins
  await server.register([
    Inert,
    Vision
  ]);

  // Add request logging
  server.ext('onRequest', (request, h) => {
    logger.info('Request received', {
      method: request.method,
      path: request.path,
      query: request.query,
      ip: request.info.remoteAddress
    });
    return h.continue;
  });

  // Add response logging
  server.ext('onPreResponse', (request, h) => {
    const response = request.response;
    const statusCode = response.isBoom ? response.output.statusCode : response.statusCode;

    logger.info('Request completed', {
      method: request.method,
      path: request.path,
      statusCode,
      responseTime: Date.now() - request.info.received
    });

    return h.continue;
  });

  // Register routes
  await createHealthRoutes(server);
  await createFHIRRoutes(server);

  // Error handling
  server.ext('onPreResponse', (request, h) => {
    const response = request.response;

    if (response.isBoom) {
      const statusCode = response.output.statusCode;
      const error = response.output.payload;

      logger.error('Request failed', {
        method: request.method,
        path: request.path,
        statusCode,
        error: error.message
      });

      // Return a sanitized error response
      return h.response({
        error: error.error,
        message: error.message,
        statusCode,
        timestamp: new Date().toISOString()
      }).code(statusCode);
    }

    return h.continue;
  });

  await server.start();

  logger.info('{{APP_NAME}} server started', {
    host: server.info.host,
    port: server.info.port,
    fhirServer: process.env.FHIR_SERVER_URL || '{{FHIR_SERVER_URL}}',
    environment: process.env.NODE_ENV || 'development'
  });

  // Test FHIR server connection
  try {
    await fhirClient.capabilities();
    logger.info('FHIR server connection successful');
  } catch (error) {
    logger.error('FHIR server connection failed', { error: error.message });
  }

  return server;
};

process.on('unhandledRejection', (err) => {
  logger.error('Unhandled rejection', { error: err.message, stack: err.stack });
  process.exit(1);
});

process.on('SIGTERM', () => {
  logger.info('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('SIGINT received, shutting down gracefully');
  process.exit(0);
});

init();